#!/usr/bin/env python3
#
# Update mango DB
# Search by prodcut and only return items with CVSS >7 
# Save to Json file
#

# Imports
from __future__ import print_function
import os
import sys
import subprocess
import shlex
#runPath = os.path.dirname(os.path.realpath('__file__'))
#sys.path.append(os.path.join(runPath, ".."))

import json
from bson import json_util

import datetime
#from dateutil.parser import parse as parse_datetime

from lib import CVEs
import lib.DatabaseLayer as db


import time
start_time = time.time()

#redefine the API function to sort by date in ascending order
def NewcvesForCPE(cpe):
  if not cpe: return []
  return db.sanitize(db.colCVE.find({"vulnerable_configuration": {"$regex": cpe}}).sort("Modified", +1))


#update database
#runPath = os.path.dirname(os.path.realpath('__file__'))
#print(runPath)
#updater = "python3 " + os.path.join(runPath, "sbin/db_mgmt.py -u")
updater = "python3 /home/wen/cve-search/sbin/db_mgmt.py -u"
subprocess.Popen((shlex.split(updater))).wait()
print(shlex.split(updater))

product = 'linux:'
output = '/home/wen/cve-search/old.json'
record_updated = 0  
old = []
#only get the last line
if os.path.isfile(output):
   with open(output, 'r') as f :
       #load the existing Json file
       for line in f:
           old = json.loads(line)
   #print(len(old))
   #print(old['Modified'])
   #print(datetime.datetime.fromtimestamp(old[0]['Modified']['$date']/1000.0).strftime('%Y-%m-%d %H:%M:%S'))
   for item in NewcvesForCPE(product):
       if (float(item['cvss']) > 7.0) and (old['Modified']['$date'] < (item['Modified']-datetime.datetime(1970,1,1)).total_seconds()*1000):
          #print(item['Modified'])
          #print((item['Modified']-datetime.datetime(1970,1,1)).total_seconds()*1000)
          #append at the end of the file
          with open(output, 'a+') as f:
               json.dump(item, f, sort_keys=True, default=json_util.default, indent=None)
               f.write('\n')
          record_updated += 1
else:
   for item in NewcvesForCPE(product):
       if (float(item['cvss']) > 7.0):
          #print(item['Modified'])
          with open(output, 'a') as f:
               json.dump(item, f, sort_keys=True, default=json_util.default, indent=None)
               f.write('\n')
          record_updated += 1
 
print("%d records updated" % record_updated)

print("run--- %s seconds ---" % int(time.time() - start_time))

print("Fnished at ", datetime.datetime.now())
